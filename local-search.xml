<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LC1769·移动所有球到每个盒子所需的最小操作数</title>
    <link href="/2022/12/02/algorithm/medium/minimum-number-of-operations-to-move-all-balls-to-each-box/"/>
    <url>/2022/12/02/algorithm/medium/minimum-number-of-operations-to-move-all-balls-to-each-box/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-warning">            <p><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/">1769. 移动所有球到每个盒子所需的最小操作数</a></p>          </div><p>有 <code>n</code> 个盒子。给你一个长度为 <code>n</code> 的二进制字符串 <code>boxes</code> ，其中 <code>boxes[i]</code> 的值为 ‘0’ 表示第 i 个盒子是 空 的，而 <code>boxes[i]</code> 的值为 <code>&#39;1&#39;</code> 表示盒子里有 一个 小球。</p><p>在一步操作中，你可以将 一个 小球从某个盒子移动到一个与之相邻的盒子中。第 <code>i</code> 个盒子和第 <code>j</code> 个盒子相邻需满足 <code>abs(i - j) == 1</code> 。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p><p>返回一个长度为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是将所有小球移动到第 <code>i</code> 个盒子所需的 <strong>最小</strong> 操作数。</p><p>每个 <code>answer[i]</code> 都需要根据盒子的 <strong>初始状态</strong> 进行计算。</p><p> </p><p>示例 1：</p><blockquote><p><strong>输入：</strong>boxes &#x3D; “110”<br>输出：[1,1,3]<br><strong>解释：</strong>每个盒子对应的最小操作数如下：</p><ol><li>第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。</li><li>第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。</li><li>第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。</li></ol></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>boxes &#x3D; “001011”<br><strong>输出：</strong>[11,8,5,4,3,4]</p></blockquote><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><p>对于第n个位置的小球对应移动 abs(n - i)次</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxRotateFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> i <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">-</span> n <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> total<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间O(n*m) m为set集合的长度</li><li>空间O(m)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划&gt;前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC396·旋转函数</title>
    <link href="/2022/12/02/algorithm/medium/rotate-function/"/>
    <url>/2022/12/02/algorithm/medium/rotate-function/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-warning">            <p><a href="https://leetcode.cn/problems/rotate-function">396. 旋转函数</a></p>          </div><p>给定一个长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p><p>假设 <code>arrk</code> 是数组 <code>nums</code> 顺时针旋转 <code>k</code> 个位置后的数组，我们定义 <code>nums</code> 的 旋转函数  <code>F</code> 为：</p><p><code>F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]</code><br>返回 <code>F(0), F(1), ..., F(n-1)</code>中的最大值 。</p><p>生成的测试用例让答案符合 <code>32 位</code> 整数。</p><p>示例 1:</p><blockquote><p><strong>输入:</strong> nums &#x3D; [4,3,2,6]<br><strong>输出:</strong> 26<br><strong>解释:</strong><br>F(0) &#x3D; (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) &#x3D; 0 + 3 + 4 + 18 &#x3D; 25<br>F(1) &#x3D; (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) &#x3D; 0 + 4 + 6 + 6 &#x3D; 16<br>F(2) &#x3D; (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) &#x3D; 0 + 6 + 8 + 9 &#x3D; 23<br>F(3) &#x3D; (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) &#x3D; 0 + 2 + 12 + 12 &#x3D; 26<br>所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) &#x3D; 26 。</p></blockquote><p>示例 2:</p><blockquote><p><strong>输入:</strong> nums &#x3D; [100]<br><strong>输出:</strong> 0</p></blockquote><p>提示:</p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>据题意可总结出以下规律</p><blockquote><p>输入数组为[a,b,c,d]</p></blockquote><p>$$<br>F ( 0 ) &#x3D; 0 a + 1 b + 2 c + 3 d<br>$$</p><p>$$<br>F ( 1 ) &#x3D; 1 a + 2 b + 3 c + 0 d<br>$$</p><p>$$<br>F ( 2) &#x3D; 2 a + 3 b + 0 c + 1 d<br>$$</p><p>$$<br>F ( 3 ) &#x3D; 3 a + 0 b + 1 c + 2 d<br>$$</p><p>就有：<br>$$<br>F ( 1 ) - F ( 0 ) &#x3D;   a + b + c - 3 d \<br>$$</p><p>$$<br>F ( 2 ) - F ( 1 ) &#x3D;   a + b + d - 3 c \<br>$$</p><p>$$<br>F ( 3 ) - F ( 2 ) &#x3D;   a + c + d - 3 b \<br>$$</p><p>$$<br>F ( 0 ) - F ( 3 ) &#x3D;   b + c + d - 3 a \<br>$$<br>对于四项数组而言：<br>$$<br>F ( i ) - F ( i - 1 ) &#x3D;   a+b+c+d-n(n - i)<br>$$<br>对于i项：<br>$$<br>F(i) - F(i - 1) &#x3D; sum(nums) - nums[n - i] - (n - 1) * nums[n - i]\<br>$$</p><p>$$<br>&#x3D; sum(nums) - n * nums[n - i]<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxRotateFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> i <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">-</span> n <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> total<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间O(n)</li><li>空间O(n)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC303·区域和检索 - 数组不可变</title>
    <link href="/2022/12/02/algorithm/easy/range-sum-query-immutable/"/>
    <url>/2022/12/02/algorithm/easy/range-sum-query-immutable/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><a href="https://leetcode.cn/problems/range-sum-query-immutable/">303. 区域和检索 - 数组不可变</a></p>          </div><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组  <code>nums</code>，处理以下类型的多个查询:</p><p>计算索引 left 和 right （包含 <code>left</code> 和 <code>right</code>）之间的 <code>nums</code> 元素的 <strong>和</strong> ，其中<code> left &lt;= right</code><br>实现 <code>NumArray</code> 类：</p><ul><li><code>NumArray(int[] nums)</code> 使用数组 <code>nums</code> 初始化对象</li><li><code>int sumRange(int i, int j)</code> 返回数组 <code>nums</code> 中索引 <code>left</code> 和 <code>right</code> 之间的元素的 <strong>总和</strong> ，包含 <code>left</code> 和 <code>right</code> 两点（也就是 <code>nums[left] + nums[left + 1] + ... + nums[right] </code>)</li></ul><p>示例 1：</p><blockquote><p><strong>输入：</strong><br>[“NumArray”, “sumRange”, “sumRange”, “sumRange”]<br>[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]<br><strong>输出：</strong><br>[null, 1, -1, -3]</p><p><strong>解释：</strong><br>NumArray numArray &#x3D; new NumArray([-2, 0, 3, -5, 2, -1]);<br>numArray.sumRange(0, 2); &#x2F;&#x2F; return 1 ((-2) + 0 + 3)<br>numArray.sumRange(2, 5); &#x2F;&#x2F; return -1 (3 + (-5) + 2 + (-1))<br>numArray.sumRange(0, 5); &#x2F;&#x2F; return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))</p></blockquote><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10^4</li><li>-10^5 &lt;&#x3D; nums[i] &lt;&#x3D; 10^5</li><li>0 &lt;&#x3D; i &lt;&#x3D; j &lt; nums.length</li><li>最多调用 10^4 次 sumRange 方法</li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力（bushi）"><a href="#暴力（bushi）" class="headerlink" title="暴力（bushi）"></a>暴力（bushi）</h2><p>模拟</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间 O(m-n) m为right参数，n为left参数</p></li><li><p>空间 O(n) n为该数组长度</p></li></ul><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>对上述算法其时间复杂度可进行优化。</p><p>为方便理解，归纳出如下 <code>sum</code> 表格</p><table><thead><tr><th align="center">0-1(index:0)</th><th align="center">0-2(index:1)</th><th align="center">0-3(index:2)</th><th align="center">0-4(index:3)</th><th align="center">0-5(index:4)</th><th align="center">0-6(index:5)</th></tr></thead><tbody><tr><td align="center">-2</td><td align="center">-2</td><td align="center">1</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td></tr></tbody></table><hr><p>当 <code>left</code> 参数为0时，按<code>rinht</code>为索引返回即可：</p><table><thead><tr><th align="center">0-1</th><th align="center">0-2</th><th align="center">0-3</th><th align="center">0-4</th><th align="center">0-5</th></tr></thead><tbody><tr><td align="center">-2</td><td align="center">1</td><td align="center">-4</td><td align="center">-2</td><td align="center">-3</td></tr></tbody></table><p>其余情况可总结出如下规律：</p><blockquote><p>sumRange(l,r) &#x3D; sum[r] - sum[l-1]</p></blockquote><table><thead><tr><th align="center">—</th><th align="center">1-2</th><th align="center">1-3</th><th align="center">1-4</th><th align="center">1-5</th></tr></thead><tbody><tr><td align="center">—</td><td align="center">3</td><td align="center">-2</td><td align="center">0</td><td align="center">-1</td></tr></tbody></table><table><thead><tr><th align="center">—</th><th align="center">—</th><th align="center">2-3</th><th align="center">2-4</th><th align="center">2-5</th></tr></thead><tbody><tr><td align="center">—</td><td align="center">—</td><td align="center">-2</td><td align="center">0</td><td align="center">-1</td></tr></tbody></table><table><thead><tr><th align="center">—</th><th align="center">—</th><th align="center">—</th><th align="center">3-4</th><th align="center">3-5</th></tr></thead><tbody><tr><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">-3</td><td align="center">-4</td></tr></tbody></table><table><thead><tr><th align="center">—</th><th align="center">—</th><th align="center">—</th><th align="center">—</th><th align="center">4-5</th></tr></thead><tbody><tr><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">1</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度："><a href="#复杂度：" class="headerlink" title="复杂度："></a>复杂度：</h3><ul><li>时间复杂度：<ul><li>初始化时间复杂度：O(n) n为数组长度</li><li>检索时间复杂度：O(1)</li></ul></li><li>空间复杂度：O(n)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC219·存在重复元素</title>
    <link href="/2022/12/01/algorithm/easy/contains-duplicate-ii/"/>
    <url>/2022/12/01/algorithm/easy/contains-duplicate-ii/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/contains-duplicate-ii/">219. 存在重复元素 II</a></p>          </div><p>给你一个整数数组 <code>nums </code>和一个整数 <code>k</code> ，判断数组中是否存在两个 不同的索引 <code>i</code> 和 <code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且 <code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>示例 1：</p><blockquote><p><strong>输入：</strong>nums &#x3D; [1,2,3,1], k &#x3D; 3<br><strong>输出：</strong>true</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>nums &#x3D; [1,0,1,1], k &#x3D; 1<br><strong>输出：</strong>true</p></blockquote><p>示例 3：</p><blockquote><p><strong>输入：</strong>nums &#x3D; [1,2,3,1,2,3], k &#x3D; 2<br><strong>输出：</strong>false</p></blockquote><p>提示：</p><ul><li><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 10^5</p></li><li><p>-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9</p></li><li><p>0 &lt;&#x3D; k &lt;&#x3D; 10^5</p></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="暴力-bushi"><a href="#暴力-bushi" class="headerlink" title="暴力(bushi)"></a>暴力(bushi)</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>超时了….&#x2F;(ㄒoㄒ)&#x2F;~~6</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间：O($n^2$)</li><li>空间：O(1)</li></ul><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>可对上述算法的时间进行优化</p><p>​对时间进行优化：</p><p>​使用哈希表键存 <code>nums[i]</code> 的值,值存索引,由头至尾遍历即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间：O(n)</li><li>空间：O(n)</li></ul><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><blockquote><p> 用例：<code>nums = [1,2,3,1], k = 3</code></p></blockquote><p>当索引为 <code>0</code> , <code>4</code> ,<code>k = 3</code> 时，上述算法会对空间造成浪费。</p><p>可对上述算法空间进行优化</p><p>​使用滑动窗口，只讨论遍历索引大于<code>k</code>的情况</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> k<span class="token punctuation">)</span> set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间：O(n)</li><li>空间：O(k) k为索引差的最大绝对值</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC1779·找到最近的有相同 X 或 Y 坐标的点</title>
    <link href="/2022/12/01/algorithm/easy/find-nearest-point-that-has-the-same-x-or-y-coordinate/"/>
    <url>/2022/12/01/algorithm/easy/find-nearest-point-that-has-the-same-x-or-y-coordinate/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/">1779. 找到最近的有相同 X 或 Y 坐标的点</a></p>          </div><p>给你两个整数 <code>x</code> 和 <code>y</code> ，表示你在一个笛卡尔坐标系下的 <code>(x, y)</code> 处。同时，在同一个坐标系下给你一个数组 <code>points</code> ，其中 <code>points[i] = [ai, bi]</code> 表示在 <code>(ai, bi)</code> 处有一个点。当一个点与你所在的位置有相同的 <code>x</code> 坐标或者相同的 <code>y</code> 坐标时，我们称这个点是 有效的 。</p><p>请返回距离你当前位置 曼哈顿距离 最近的 有效 点的下标（下标从 0 开始）。如果有多个最近的有效点，请返回下标 最小 的一个。如果没有有效点，请返回 <code>-1</code> 。</p><p>两个点 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 之间的 曼哈顿距离 为 <code>abs(x1 - x2) + abs(y1 - y2)</code> 。</p><p>示例 1：</p><blockquote><p><strong>输入：</strong>x &#x3D; 3, y &#x3D; 4, points &#x3D; [[1,2],[3,1],[2,4],[2,3],[4,4]]<br><strong>输出：</strong>2<br><strong>解释：</strong>所有点中，[3,1]，[2,4] 和 [4,4] 是有效点。有效点中，[2,4] 和 [4,4] 距离你当前位置的曼哈顿距离最小，都为 1 。[2,4] 的下标最小，所以返回 2 。</p></blockquote><p>示例 2：</p><blockquote><p> <strong>输入：</strong>x &#x3D; 3, y &#x3D; 4, points &#x3D; [[3,4]]<br><strong>输出：</strong>0<br><strong>提示：</strong>答案可以与你当前所在位置坐标相同。</p></blockquote><p>示例 3：</p><blockquote><p><strong>输入：</strong>x &#x3D; 3, y &#x3D; 4, points &#x3D; [[2,3]]<br><strong>输出：</strong>-1<br><strong>解释：</strong>没有 有效点。</p></blockquote><p>提示：</p><ul><li>1 &lt;&#x3D; points.length &lt;&#x3D; 10^4</li><li>points[i].length &#x3D;&#x3D; 2</li><li>1 &lt;&#x3D; x, y, ai, bi &lt;&#x3D; 104</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>进行模拟即可</p><h3 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nearestValidPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> xx <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yy <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xx <span class="token operator">||</span> y <span class="token operator">==</span> yy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> xx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> yy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间：O(n)</li><li>空间：O(1)</li></ul><h3 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h3><p>上述方案对于横纵坐标相等的情况，会额外计算一次<code>abs(x1-x2)</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nearestValidPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> xx <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yy <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> yy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> yy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> xx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间：O(n)</li><li>空间：O(1)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC895·最大频率栈</title>
    <link href="/2022/11/30/algorithm/hard/maximum-frequency-stack/"/>
    <url>/2022/11/30/algorithm/hard/maximum-frequency-stack/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-danger">            <p><a href="https://leetcode.cn/problems/maximum-frequency-stack">895. 最大频率栈</a></p>          </div><p>设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。</p><p>实现 <code>FreqStack</code> 类:</p><ul><li><code>FreqStack()</code> 构造一个空的堆栈。</li><li><code>void push(int val)</code> 将一个整数 <code>val</code> 压入栈顶。</li><li><code>int pop()</code> 删除并返回堆栈中出现频率最高的元素。<ul><li>如果出现频率最高的元素不只一个，则移除并返回最接近栈顶的元素。</li></ul></li></ul><p>示例 1：</p><blockquote><p><strong>输入：</strong><br>[“FreqStack”,”push”,”push”,”push”,”push”,”push”,”push”,”pop”,”pop”,”pop”,”pop”],<br>[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]<br><strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]<br><strong>解释：</strong><br>FreqStack &#x3D; new FreqStack();<br>freqStack.push (5);&#x2F;&#x2F;堆栈为 [5]<br>freqStack.push (7);&#x2F;&#x2F;堆栈是 [5,7]<br>freqStack.push (5);&#x2F;&#x2F;堆栈是 [5,7,5]<br>freqStack.push (7);&#x2F;&#x2F;堆栈是 [5,7,5,7]<br>freqStack.push (4);&#x2F;&#x2F;堆栈是 [5,7,5,7,4]<br>freqStack.push (5);&#x2F;&#x2F;堆栈是 [5,7,5,7,4,5]<br>freqStack.pop ();&#x2F;&#x2F;返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。<br>freqStack.pop ();&#x2F;&#x2F;返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。<br>freqStack.pop ();&#x2F;&#x2F;返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。<br>freqStack.pop ();&#x2F;&#x2F;返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。</p></blockquote><p>提示：</p><ul><li><p><code>0 &lt;= val &lt;=  10^9</code></p></li><li><p><code>push</code> 和 <code>pop</code> 的操作数不大于 <code>2 * 10^4</code>。</p></li><li><p>输入保证在调用 <code>pop</code> 之前堆栈中至少有一个元素。</p></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>题意可知该数据结构支持</p><ol><li>记录<strong>频率最高</strong>的元素。</li><li>若两个元素频率相等，返回<strong>栈顶</strong>的元素。</li></ol><p>于是就这两个问题展开讨论：</p><ul><li>记录出现频率使用哈希表,键为元素的值，值为该元素的频率。</li><li>记录元素使用栈列表<ul><li>记录相同频率的元素使用栈。</li><li>记录不同频率的元素使用列表 ，其中<strong>索引对应该元素频率-1</strong>。</li></ul></li></ul><p>为方便理解，用表格表示该结构。</p><p>其中列表示频率，行表示元素。</p><ol><li><p>freqStack.push (5);&#x2F;&#x2F;堆栈为 [5]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.push (7);&#x2F;&#x2F;堆栈是 [5,7]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td></td><td></td></tr><tr><td>7</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.push (5);&#x2F;&#x2F;堆栈是 [5,7,5]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td></td></tr><tr><td>7</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.push (7);&#x2F;&#x2F;堆栈是 [5,7,5,7]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td></td></tr><tr><td>7</td><td>7</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.push (4);&#x2F;&#x2F;堆栈是 [5,7,5,7,4]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td></td></tr><tr><td>7</td><td>7</td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.push (5);&#x2F;&#x2F;堆栈是 [5,7,5,7,4,5]</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td>5</td></tr><tr><td>7</td><td>7</td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.pop ();&#x2F;&#x2F;返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td><strong>5(出栈)</strong></td></tr><tr><td>7</td><td>7</td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.pop ();&#x2F;&#x2F;返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td>5</td><td></td></tr><tr><td>7</td><td><strong>7(出栈)</strong></td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.pop ();&#x2F;&#x2F;返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td><strong>5(出栈)</strong></td><td></td></tr><tr><td>7</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table></li><li><p>freqStack.pop ();&#x2F;&#x2F;返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。</p><table><thead><tr><th>频率1</th><th>频率2</th><th>频率3</th></tr></thead><tbody><tr><td>5</td><td></td><td></td></tr><tr><td>7</td><td></td><td></td></tr><tr><td><strong>4(出栈)</strong></td><td></td><td></td></tr></tbody></table></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FreqStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> countMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stack</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> positionStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> countMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> positionStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> positionStack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        positionStack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        countMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> inx <span class="token operator">=</span> positionStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> positionStack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>inx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> inx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>positionStack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>inx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> positionStack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>inx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间O(1)</li><li>空间O(n)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>困难</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC1758·生成交替二进制字符串的最少操作数</title>
    <link href="/2022/11/29/algorithm/easy/minimum-changes-to-make-alternating-binary-string/"/>
    <url>/2022/11/29/algorithm/easy/minimum-changes-to-make-alternating-binary-string/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/minimum-changes-to-make-alternating-binary-string/">1758. 生成交替二进制字符串的最少操作数</a></p>          </div><p>给你一个仅由字符 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成的字符串 <code>s</code> 。一步操作中，你可以将任一 <code>&#39;0&#39;</code> 变成 <code>&#39;1&#39;</code> ，或者将 <code>&#39;1&#39;</code> 变成 <code>&#39;0&#39;</code> 。</p><p>交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 “010” 是交替字符串，而字符串 “0100” 不是。</p><p>返回使 s 变成 交替字符串 所需的 最少 操作数。</p><p>示例 1：</p><blockquote><p><strong>输入：</strong>s &#x3D; “0100”<br><strong>输出：</strong>1<br><strong>解释：</strong>如果将最后一个字符变为 ‘1’ ，s 就变成 “0101” ，即符合交替字符串定义。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>s &#x3D; “10”<br><strong>输出：</strong>0<br><strong>解释：</strong>s 已经是交替字符串。</p></blockquote><p>示例 3：</p><blockquote><p><strong>输入：</strong>s &#x3D; “1111”<br><strong>输出：</strong>2<br><strong>解释：</strong>需要 2 步操作得到 “0101” 或 “1010” 。</p></blockquote><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s[i]</code> 是 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="数学（奇偶性）"><a href="#数学（奇偶性）" class="headerlink" title="数学（奇偶性）"></a>数学（奇偶性）</h2><p>题意得知必须保证奇数位与偶数位互异，所以只需要统计互异的次数可得到一种解。</p><p>题目要求最小解，则使用字符串长度减去其一解得到另一解，返回最小值即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minOperations</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len <span class="token operator">-</span> count<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间 O(n)</p></li><li><p>空间 O(1)</p></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>题意得知每一位必须互异，则构造出该模板答案进行匹配即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minOperations</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token char">'0'</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态构造互异字符串</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> len <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间O(n)</p></li><li><p>空间 O(n)</p></li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC1217·玩筹码</title>
    <link href="/2022/11/29/algorithm/easy/minimum-cost-to-move-chips-to-the-same-position/"/>
    <url>/2022/11/29/algorithm/easy/minimum-cost-to-move-chips-to-the-same-position/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><a href="https://leetcode.cn/problems/minimum-cost-to-move-chips-to-the-same-position/">1217. 玩筹码</a></p>          </div><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>有 <code>n</code> 个筹码。第 <code>i</code> 个筹码的位置是 <code>position[i]</code> 。</p><p>我们需要把所有筹码移到同一个位置。在一步中，我们可以将第 <code>i</code> 个筹码的位置从 <code>position[i]</code> 改变为:</p><ul><li><code>position[i] + 2</code> 或 <code>position[i] - 2 </code>，此时 <code>cost = 0</code></li><li><code>position[i] + 1</code> 或 <code>position[i] - 1</code> ，此时 <code>cost = 1</code>返回将所有筹码移动到同一位置上所需要的 最小代价 。</li></ul><p>示例 1：</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,2,3]<br><strong>输出：</strong>1<br><strong>解释：</strong>第一步:将位置3的筹码移动到位置1，成本为0。<br>第二步:将位置2的筹码移动到位置1，成本&#x3D; 1。<br>总成本是1。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>position &#x3D; [2,2,2,3,3]<br><strong>输出：</strong>2<br><strong>解释：</strong>我们可以把位置3的两个筹码移到位置2。每一步的成本为1。总成本&#x3D; 2。</p></blockquote><p>示例 3:</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,1000000000]<br><strong>输出：</strong>1</p></blockquote><p>提示：</p><ul><li><p><code>1 &lt;= position.length &lt;= 100</code></p></li><li><p><code>1 &lt;= position[i] &lt;= 10^9</code></p></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="数学（奇偶性统计）"><a href="#数学（奇偶性统计）" class="headerlink" title="数学（奇偶性统计）"></a>数学（奇偶性统计）</h2><p>根据题意得知索引间隔为2（偶数）时每次移动cost为0，间隔为1（奇数）时每次移动cost为1</p><p>于是</p><ul><li><p>当<code>position = [1,1,3,3,5,5]</code>可以简化为<code>[1,1,1,1,1,1]</code></p></li><li><p>当<code>position = [1,1,2,2,2,3,3,4,4]</code>可以简化为<code>[1,1,1,1,2,2,2,2,2]</code></p></li></ul><p>即奇数位置和偶数位置可以归并讨论</p><p>于是题目可以换一种问法：</p><p>给定一个数组，请你返回出现次数最少的奇数或偶数。</p><p>示例 1：</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,2,3]<br><strong>输出：</strong>1<br><strong>解释：</strong>奇数出现次数为2，偶数出现次数为1。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>position &#x3D; [2,2,2,3,3]<br><strong>输出：</strong>2<br><strong>解释：</strong>奇数出现次数为2，偶数出现次数为3。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCostToMoveChips</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> odd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> even<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>odd<span class="token punctuation">,</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>空间还可进一步优化</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCostToMoveChips</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> position<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> odd<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>odd<span class="token punctuation">,</span>position<span class="token punctuation">.</span>length <span class="token operator">-</span> odd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><ul><li><p>时间 O(n)</p></li><li><p>空间 O(1)</p></li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC1037·有效的回旋镖</title>
    <link href="/2022/06/08/algorithm/easy/valid-boomerang/"/>
    <url>/2022/06/08/algorithm/easy/valid-boomerang/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/valid-boomerang/">1037. 有效的回旋镖</a></p>          </div><p>给定一个数组 <code>points</code>，其中 <code>points[i] = [xi, yi]</code>表示 <code>X-Y</code> 平面上的一个点，如果这些点构成一个 回旋镖 则返回 <code>true</code>。</p><p>回旋镖 定义为一组三个点，这些点 各不相同 且 不在一条直线上 。</p><p>示例1:</p><blockquote><p><strong>输入：</strong>points &#x3D; [[1,1],[2,3],[3,2]]<br><strong>输出：</strong>true</p></blockquote><p>示例2：</p><blockquote><p><strong>输入：</strong>points &#x3D; [[1,1],[2,2],[3,3]]<br><strong>输出：</strong>false</p></blockquote><p>提示：</p><ul><li><code>points.length == 3</code></li><li><code>points[i].length == 2</code></li><li><code>0 &lt;= xi, yi &lt;= 100</code></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="数学（计算机几何）"><a href="#数学（计算机几何）" class="headerlink" title="数学（计算机几何）"></a>数学（计算机几何）</h2><p>根据题意，当指针为奇数时取最大值、指针为偶数时间取最小值</p><blockquote><p><a href="https://zh.m.wikipedia.org/zh-hk/%E6%96%9C%E7%8E%87">(￢‸￢) ?【斜率】</a></p></blockquote><p>判断直线是否为同一条可使用斜率，即<br>$$<br>k &#x3D; \operatorname { tan } \alpha &#x3D; \Delta \frac { y } { x }<br>$$<br>当两条直线重叠时（斜率相同）则有<br>$$<br>frac { y _ { a } - y _ { b } } { x _ { a } - x _ { b } } &#x3D; \frac { y _ { c } - y _ { b } } { x _ { c } - x _ { b } }<br>$$</p><p>带入题中可得<br>$$<br>\frac { y _ { 1 } - y _ { 0 } } { x _ { 1 } - x _ { 0 } } &#x3D; \frac { y _ { 2 } - y _ { 1 } } { x _ { 2 } - x _ { 1 } }<br>$$<br>化简后可得<br>$$<br>( y _ { 1 } - y _ { 0 } ) ( x _ { 2 } - x _ { 1 } ) &#x3D; ( y _ { 2 } - y _ { 1 } ) ( x _ { 1 } - x _ { 0 } )<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBoomerang</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    k2 <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> k1 <span class="token operator">!=</span> k2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><ul><li>时间： O(n)</li><li>空间： O(n)</li></ul><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>计算机几何</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC6090·极大极小游戏</title>
    <link href="/2022/06/05/algorithm/easy/min-max-game/"/>
    <url>/2022/06/05/algorithm/easy/min-max-game/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/min-max-game/">6090. 极大极小游戏</a></p>          </div><p>给你一个下标从 0 开始的整数数组 nums ，其长度是 2 的幂。</p><p>对 nums 执行下述算法：</p><ol><li>设 n 等于 nums 的长度，如果 n &#x3D;&#x3D; 1 ，终止 算法过程。否则，创建 一个新的整数数组 newNums ，新数组长度为 n &#x2F; 2 ，下标从 0 开始。</li><li>对于满足 0 &lt;&#x3D; i &lt; n &#x2F; 2 的每个 偶数 下标 i ，将 newNums[i] 赋值 为 min(nums[2 * i], nums[2 * i + 1]) 。</li><li>对于满足 0 &lt;&#x3D; i &lt; n &#x2F; 2 的每个 奇数 下标 i ，将 newNums[i] 赋值 为 max(nums[2 * i], nums[2 * i + 1]) 。</li><li>用 newNums 替换 nums 。</li><li>从步骤 1 开始 重复 整个过程。</li></ol><p>执行算法后，返回 nums 中剩下的那个数字。</p><p>示例1:</p><blockquote><p><strong>输入：</strong>nums &#x3D; [1,3,5,2,4,8,2,2]<br><strong>输出：</strong>1<br><strong>解释：</strong>重复执行算法会得到下述数组。<br>第一轮：nums &#x3D; [1,5,4,2]<br>第二轮：nums &#x3D; [1,4]<br>第三轮：nums &#x3D; [1]<br>1 是最后剩下的那个数字，返回 1。</p></blockquote><p>示例2：</p><blockquote><p><strong>输入：</strong>nums &#x3D; [3]<br><strong>输出：</strong>3<br><strong>解释：</strong>3 就是最后剩下的数字，返回 3 。</p></blockquote><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 10^24</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li><code>nums.length 是 2 的幂</code></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>根据题意，当指针为奇数时取最大值、指针为偶数时间取最小值</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">minMaxGame</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><ul><li>时间： O(n) n为数组长</li><li>空间： O(n)</li></ul><p>实际为n&#x2F;2 + m （n为数组长度，m为调用次数） 即O(n)</p><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>俺滴第一篇文章</title>
    <link href="/2022/06/03/other/firest/"/>
    <url>/2022/06/03/other/firest/</url>
    
    <content type="html"><![CDATA[<h1 id="俺滴第一篇文章o-￣▽￣-ブ"><a href="#俺滴第一篇文章o-￣▽￣-ブ" class="headerlink" title="俺滴第一篇文章o(￣▽￣)ブ"></a>俺滴第一篇文章o(￣▽￣)ブ</h1><p>千呼万唤始出来，终于是把这个玩意整好了，不得不说这一套框架是很强的。于是就发现了这个宝藏框架，研究了一下，真的厉害👍</p><div class="note note-secondary">            <p>果然我还是太菜了╥﹏╥…</p>          </div><p>那我们一起加油叭(ง •_•)ง</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
