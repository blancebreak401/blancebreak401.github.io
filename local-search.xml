<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LC1217. 玩筹码</title>
    <link href="/2022/11/29/algorithm/easy/minimum-cost-to-move-chips-to-the-same-position/"/>
    <url>/2022/11/29/algorithm/easy/minimum-cost-to-move-chips-to-the-same-position/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><a href="https://leetcode.cn/problems/minimum-cost-to-move-chips-to-the-same-position/">1217. 玩筹码</a></p>          </div><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>有 <code>n</code> 个筹码。第 <code>i</code> 个筹码的位置是 <code>position[i]</code> 。</p><p>我们需要把所有筹码移到同一个位置。在一步中，我们可以将第 <code>i</code> 个筹码的位置从 <code>position[i]</code> 改变为:</p><ul><li><code>position[i] + 2</code> 或 <code>position[i] - 2 </code>，此时 <code>cost = 0</code></li><li><code>position[i] + 1</code> 或 <code>position[i] - 1</code> ，此时 <code>cost = 1</code>返回将所有筹码移动到同一位置上所需要的 最小代价 。</li></ul><p>示例 1：</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,2,3]<br><strong>输出：</strong>1<br><strong>解释：</strong>第一步:将位置3的筹码移动到位置1，成本为0。<br>第二步:将位置2的筹码移动到位置1，成本&#x3D; 1。<br>总成本是1。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>position &#x3D; [2,2,2,3,3]<br><strong>输出：</strong>2<br><strong>解释：</strong>我们可以把位置3的两个筹码移到位置2。每一步的成本为1。总成本&#x3D; 2。</p></blockquote><p>示例 3:</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,1000000000]<br><strong>输出：</strong>1</p></blockquote><p>提示：</p><ul><li><p><code>1 &lt;= position.length &lt;= 100</code></p></li><li><p><code>1 &lt;= position[i] &lt;= 10^9</code></p></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="数学（奇偶性统计）"><a href="#数学（奇偶性统计）" class="headerlink" title="数学（奇偶性统计）"></a>数学（奇偶性统计）</h2><p>根据题意得知索引间隔为2（偶数）时每次移动cost为0，间隔为1（奇数）时每次移动cost为1</p><p>于是</p><ul><li><p>当<code>position = [1,1,3,3,5,5]</code>可以简化为<code>[1,1,1,1,1,1]</code></p></li><li><p>当<code>position = [1,1,2,2,2,3,3,4,4]</code>可以简化为<code>[1,1,1,1,2,2,2,2,2]</code></p></li></ul><p>即奇数位置和偶数位置可以归并讨论</p><p>于是题目可以换一种问法：</p><p>给定一个数组，请你返回出现次数最少的奇数或偶数。</p><p>示例 1：</p><blockquote><p><strong>输入：</strong>position &#x3D; [1,2,3]<br><strong>输出：</strong>1<br><strong>解释：</strong>奇数出现次数为2，偶数出现次数为1。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入：</strong>position &#x3D; [2,2,2,3,3]<br><strong>输出：</strong>2<br><strong>解释：</strong>奇数出现次数为2，偶数出现次数为3。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCostToMoveChips</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> odd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> even<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>odd<span class="token punctuation">,</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>空间还可进一步优化</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCostToMoveChips</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> position<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> odd<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>odd<span class="token punctuation">,</span>position<span class="token punctuation">.</span>length <span class="token operator">-</span> odd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><h4 id="时间-O-n"><a href="#时间-O-n" class="headerlink" title="时间 O(n)"></a>时间 O(n)</h4><h4 id="空间-O-1"><a href="#空间-O-1" class="headerlink" title="空间 O(1)"></a>空间 O(1)</h4><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC1037·有效的回旋镖</title>
    <link href="/2022/06/08/algorithm/easy/valid-boomerang/"/>
    <url>/2022/06/08/algorithm/easy/valid-boomerang/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/valid-boomerang/">[1037. 有效的回旋镖]</a></p>          </div><p>给定一个数组 <code>points</code>，其中 <code>points[i] = [xi, yi]</code>表示 <code>X-Y</code> 平面上的一个点，如果这些点构成一个 回旋镖 则返回 <code>true</code>。</p><p>回旋镖 定义为一组三个点，这些点 各不相同 且 不在一条直线上 。</p><p>示例1:</p><blockquote><p><strong>输入：</strong>points &#x3D; [[1,1],[2,3],[3,2]]<br><strong>输出：</strong>true</p></blockquote><p>示例2：</p><blockquote><p><strong>输入：</strong>points &#x3D; [[1,1],[2,2],[3,3]]<br><strong>输出：</strong>false</p></blockquote><p>提示：</p><ul><li><code>points.length == 3</code></li><li><code>points[i].length == 2</code></li><li><code>0 &lt;= xi, yi &lt;= 100</code></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="数学（计算机几何）"><a href="#数学（计算机几何）" class="headerlink" title="数学（计算机几何）"></a>数学（计算机几何）</h2><p>根据题意，当指针为奇数时取最大值、指针为偶数时间取最小值</p><blockquote><p><a href="https://zh.m.wikipedia.org/zh-hk/%E6%96%9C%E7%8E%87">(￢‸￢) ?【斜率】</a></p></blockquote><p>判断直线是否为同一条可使用斜率，即<br>$$<br>k &#x3D; \operatorname { tan } \alpha &#x3D; \Delta \frac { y } { x }<br>$$<br>当两条直线重叠时（斜率相同）则有<br>$$<br>frac { y _ { a } - y _ { b } } { x _ { a } - x _ { b } } &#x3D; \frac { y _ { c } - y _ { b } } { x _ { c } - x _ { b } }<br>$$</p><p>带入题中可得<br>$$<br>\frac { y _ { 1 } - y _ { 0 } } { x _ { 1 } - x _ { 0 } } &#x3D; \frac { y _ { 2 } - y _ { 1 } } { x _ { 2 } - x _ { 1 } }<br>$$<br>化简后可得<br>$$<br>( y _ { 1 } - y _ { 0 } ) ( x _ { 2 } - x _ { 1 } ) &#x3D; ( y _ { 2 } - y _ { 1 } ) ( x _ { 1 } - x _ { 0 } )<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBoomerang</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    k2 <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> k1 <span class="token operator">!=</span> k2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><h4 id="时间：-O-n"><a href="#时间：-O-n" class="headerlink" title="时间： O(n)"></a>时间： O(n)</h4><h4 id="空间：-O-n"><a href="#空间：-O-n" class="headerlink" title="空间： O(n)"></a>空间： O(n)</h4><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>计算机几何</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC6090·极大极小游戏</title>
    <link href="/2022/06/05/algorithm/easy/min-max-game/"/>
    <url>/2022/06/05/algorithm/easy/min-max-game/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="note note-success">            <p><a href="https://leetcode.cn/problems/min-max-game/">6090. 极大极小游戏</a></p>          </div><p>给你一个下标从 0 开始的整数数组 nums ，其长度是 2 的幂。</p><p>对 nums 执行下述算法：</p><ol><li>设 n 等于 nums 的长度，如果 n &#x3D;&#x3D; 1 ，终止 算法过程。否则，创建 一个新的整数数组 newNums ，新数组长度为 n &#x2F; 2 ，下标从 0 开始。</li><li>对于满足 0 &lt;&#x3D; i &lt; n &#x2F; 2 的每个 偶数 下标 i ，将 newNums[i] 赋值 为 min(nums[2 * i], nums[2 * i + 1]) 。</li><li>对于满足 0 &lt;&#x3D; i &lt; n &#x2F; 2 的每个 奇数 下标 i ，将 newNums[i] 赋值 为 max(nums[2 * i], nums[2 * i + 1]) 。</li><li>用 newNums 替换 nums 。</li><li>从步骤 1 开始 重复 整个过程。</li></ol><p>执行算法后，返回 nums 中剩下的那个数字。</p><p>示例1:</p><blockquote><p><strong>输入：</strong>nums &#x3D; [1,3,5,2,4,8,2,2]<br><strong>输出：</strong>1<br><strong>解释：</strong>重复执行算法会得到下述数组。<br>第一轮：nums &#x3D; [1,5,4,2]<br>第二轮：nums &#x3D; [1,4]<br>第三轮：nums &#x3D; [1]<br>1 是最后剩下的那个数字，返回 1。</p></blockquote><p>示例2：</p><blockquote><p><strong>输入：</strong>nums &#x3D; [3]<br><strong>输出：</strong>3<br><strong>解释：</strong>3 就是最后剩下的数字，返回 3 。</p></blockquote><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 1024</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>nums.length 是 2 的幂</code></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>根据题意，当指针为奇数时取最大值、指针为偶数时间取最小值</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">minMaxGame</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><h4 id="时间：-O-n-n为数组长"><a href="#时间：-O-n-n为数组长" class="headerlink" title="时间： O(n) n为数组长"></a>时间： O(n) n为数组长</h4><h4 id="空间：-O-n"><a href="#空间：-O-n" class="headerlink" title="空间： O(n)"></a>空间： O(n)</h4><p>实际为n&#x2F;2 + m （n为数组长度，m为调用次数） 即O(n)</p><blockquote><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>俺滴第一篇文章</title>
    <link href="/2022/06/03/other/firest/"/>
    <url>/2022/06/03/other/firest/</url>
    
    <content type="html"><![CDATA[<h1 id="俺滴第一篇文章o-￣▽￣-ブ"><a href="#俺滴第一篇文章o-￣▽￣-ブ" class="headerlink" title="俺滴第一篇文章o(￣▽￣)ブ"></a>俺滴第一篇文章o(￣▽￣)ブ</h1><p>千呼万唤始出来，终于是把这个玩意整好了，不得不说这一套框架是很强的，本来是打算自己开发一套的，到设计表结构的时候，发现没这么简单。。。于是就发现了这个宝藏框架，研究了一下，真的厉害👍</p><div class="note note-secondary">            <p>果然我还是太菜了╥﹏╥…</p>          </div><p>那我们一起加油叭(ง •_•)ง</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
